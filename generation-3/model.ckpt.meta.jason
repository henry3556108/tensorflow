meta_info_def {
  stripped_op_list {
    op {
      name: "Add"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      input_arg {
        name: "y"
        type_attr: "T"
      }
      output_arg {
        name: "z"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_BFLOAT16
            type: DT_HALF
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_INT8
            type: DT_INT16
            type: DT_INT32
            type: DT_INT64
            type: DT_COMPLEX64
            type: DT_COMPLEX128
            type: DT_STRING
          }
        }
      }
    }
    op {
      name: "AddN"
      input_arg {
        name: "inputs"
        type_attr: "T"
        number_attr: "N"
      }
      output_arg {
        name: "sum"
        type_attr: "T"
      }
      attr {
        name: "N"
        type: "int"
        has_minimum: true
        minimum: 1
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_UINT8
            type: DT_INT16
            type: DT_INT8
            type: DT_COMPLEX64
            type: DT_INT64
            type: DT_QINT8
            type: DT_QUINT8
            type: DT_QINT32
            type: DT_BFLOAT16
            type: DT_UINT16
            type: DT_COMPLEX128
            type: DT_HALF
            type: DT_UINT32
            type: DT_UINT64
            type: DT_VARIANT
          }
        }
      }
      is_aggregate: true
      is_commutative: true
    }
    op {
      name: "ApplyAdadelta"
      input_arg {
        name: "var"
        type_attr: "T"
        is_ref: true
      }
      input_arg {
        name: "accum"
        type_attr: "T"
        is_ref: true
      }
      input_arg {
        name: "accum_update"
        type_attr: "T"
        is_ref: true
      }
      input_arg {
        name: "lr"
        type_attr: "T"
      }
      input_arg {
        name: "rho"
        type_attr: "T"
      }
      input_arg {
        name: "epsilon"
        type_attr: "T"
      }
      input_arg {
        name: "grad"
        type_attr: "T"
      }
      output_arg {
        name: "out"
        type_attr: "T"
        is_ref: true
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_UINT8
            type: DT_INT16
            type: DT_INT8
            type: DT_COMPLEX64
            type: DT_INT64
            type: DT_QINT8
            type: DT_QUINT8
            type: DT_QINT32
            type: DT_BFLOAT16
            type: DT_UINT16
            type: DT_COMPLEX128
            type: DT_HALF
            type: DT_UINT32
            type: DT_UINT64
          }
        }
      }
      attr {
        name: "use_locking"
        type: "bool"
        default_value {
          b: false
        }
      }
    }
    op {
      name: "ArgMax"
      input_arg {
        name: "input"
        type_attr: "T"
      }
      input_arg {
        name: "dimension"
        type_attr: "Tidx"
      }
      output_arg {
        name: "output"
        type_attr: "output_type"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_UINT8
            type: DT_INT16
            type: DT_INT8
            type: DT_COMPLEX64
            type: DT_INT64
            type: DT_QINT8
            type: DT_QUINT8
            type: DT_QINT32
            type: DT_BFLOAT16
            type: DT_UINT16
            type: DT_COMPLEX128
            type: DT_HALF
            type: DT_UINT32
            type: DT_UINT64
          }
        }
      }
      attr {
        name: "Tidx"
        type: "type"
        default_value {
          type: DT_INT32
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
      attr {
        name: "output_type"
        type: "type"
        default_value {
          type: DT_INT64
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "Assign"
      input_arg {
        name: "ref"
        type_attr: "T"
        is_ref: true
      }
      input_arg {
        name: "value"
        type_attr: "T"
      }
      output_arg {
        name: "output_ref"
        type_attr: "T"
        is_ref: true
      }
      attr {
        name: "T"
        type: "type"
      }
      attr {
        name: "validate_shape"
        type: "bool"
        default_value {
          b: true
        }
      }
      attr {
        name: "use_locking"
        type: "bool"
        default_value {
          b: true
        }
      }
      allows_uninitialized_input: true
    }
    op {
      name: "AssignAdd"
      input_arg {
        name: "ref"
        type_attr: "T"
        is_ref: true
      }
      input_arg {
        name: "value"
        type_attr: "T"
      }
      output_arg {
        name: "output_ref"
        type_attr: "T"
        is_ref: true
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_UINT8
            type: DT_INT16
            type: DT_INT8
            type: DT_COMPLEX64
            type: DT_INT64
            type: DT_QINT8
            type: DT_QUINT8
            type: DT_QINT32
            type: DT_BFLOAT16
            type: DT_UINT16
            type: DT_COMPLEX128
            type: DT_HALF
            type: DT_UINT32
            type: DT_UINT64
          }
        }
      }
      attr {
        name: "use_locking"
        type: "bool"
        default_value {
          b: false
        }
      }
    }
    op {
      name: "AssignSub"
      input_arg {
        name: "ref"
        type_attr: "T"
        is_ref: true
      }
      input_arg {
        name: "value"
        type_attr: "T"
      }
      output_arg {
        name: "output_ref"
        type_attr: "T"
        is_ref: true
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_UINT8
            type: DT_INT16
            type: DT_INT8
            type: DT_COMPLEX64
            type: DT_INT64
            type: DT_QINT8
            type: DT_QUINT8
            type: DT_QINT32
            type: DT_BFLOAT16
            type: DT_UINT16
            type: DT_COMPLEX128
            type: DT_HALF
            type: DT_UINT32
            type: DT_UINT64
          }
        }
      }
      attr {
        name: "use_locking"
        type: "bool"
        default_value {
          b: false
        }
      }
    }
    op {
      name: "BroadcastGradientArgs"
      input_arg {
        name: "s0"
        type_attr: "T"
      }
      input_arg {
        name: "s1"
        type_attr: "T"
      }
      output_arg {
        name: "r0"
        type_attr: "T"
      }
      output_arg {
        name: "r1"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        default_value {
          type: DT_INT32
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "Cast"
      input_arg {
        name: "x"
        type_attr: "SrcT"
      }
      output_arg {
        name: "y"
        type_attr: "DstT"
      }
      attr {
        name: "SrcT"
        type: "type"
      }
      attr {
        name: "DstT"
        type: "type"
      }
      attr {
        name: "Truncate"
        type: "bool"
        default_value {
          b: false
        }
      }
    }
    op {
      name: "Const"
      output_arg {
        name: "output"
        type_attr: "dtype"
      }
      attr {
        name: "value"
        type: "tensor"
      }
      attr {
        name: "dtype"
        type: "type"
      }
    }
    op {
      name: "Equal"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      input_arg {
        name: "y"
        type_attr: "T"
      }
      output_arg {
        name: "z"
        type: DT_BOOL
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_BFLOAT16
            type: DT_HALF
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_INT8
            type: DT_INT16
            type: DT_INT32
            type: DT_INT64
            type: DT_COMPLEX64
            type: DT_QUINT8
            type: DT_QINT8
            type: DT_QINT32
            type: DT_STRING
            type: DT_BOOL
            type: DT_COMPLEX128
          }
        }
      }
      is_commutative: true
    }
    op {
      name: "ExpandDims"
      input_arg {
        name: "input"
        type_attr: "T"
      }
      input_arg {
        name: "dim"
        type_attr: "Tdim"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
      }
      attr {
        name: "Tdim"
        type: "type"
        default_value {
          type: DT_INT32
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "Fill"
      input_arg {
        name: "dims"
        type_attr: "index_type"
      }
      input_arg {
        name: "value"
        type_attr: "T"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
      }
      attr {
        name: "index_type"
        type: "type"
        default_value {
          type: DT_INT32
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "FloorDiv"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      input_arg {
        name: "y"
        type_attr: "T"
      }
      output_arg {
        name: "z"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_BFLOAT16
            type: DT_HALF
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_INT8
            type: DT_UINT16
            type: DT_INT16
            type: DT_INT32
            type: DT_INT64
            type: DT_COMPLEX64
            type: DT_COMPLEX128
          }
        }
      }
    }
    op {
      name: "GreaterEqual"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      input_arg {
        name: "y"
        type_attr: "T"
      }
      output_arg {
        name: "z"
        type: DT_BOOL
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_UINT8
            type: DT_INT16
            type: DT_INT8
            type: DT_INT64
            type: DT_BFLOAT16
            type: DT_UINT16
            type: DT_HALF
            type: DT_UINT32
            type: DT_UINT64
          }
        }
      }
    }
    op {
      name: "Identity"
      input_arg {
        name: "input"
        type_attr: "T"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
      }
    }
    op {
      name: "IsVariableInitialized"
      input_arg {
        name: "ref"
        type_attr: "dtype"
        is_ref: true
      }
      output_arg {
        name: "is_initialized"
        type: DT_BOOL
      }
      attr {
        name: "dtype"
        type: "type"
      }
      allows_uninitialized_input: true
    }
    op {
      name: "L2Loss"
      input_arg {
        name: "t"
        type_attr: "T"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_HALF
            type: DT_BFLOAT16
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
    }
    op {
      name: "MatMul"
      input_arg {
        name: "a"
        type_attr: "T"
      }
      input_arg {
        name: "b"
        type_attr: "T"
      }
      output_arg {
        name: "product"
        type_attr: "T"
      }
      attr {
        name: "transpose_a"
        type: "bool"
        default_value {
          b: false
        }
      }
      attr {
        name: "transpose_b"
        type: "bool"
        default_value {
          b: false
        }
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_BFLOAT16
            type: DT_HALF
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_COMPLEX64
            type: DT_COMPLEX128
          }
        }
      }
    }
    op {
      name: "Maximum"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      input_arg {
        name: "y"
        type_attr: "T"
      }
      output_arg {
        name: "z"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_BFLOAT16
            type: DT_HALF
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
      is_commutative: true
    }
    op {
      name: "Mean"
      input_arg {
        name: "input"
        type_attr: "T"
      }
      input_arg {
        name: "reduction_indices"
        type_attr: "Tidx"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "keep_dims"
        type: "bool"
        default_value {
          b: false
        }
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_UINT8
            type: DT_INT16
            type: DT_INT8
            type: DT_COMPLEX64
            type: DT_INT64
            type: DT_QINT8
            type: DT_QUINT8
            type: DT_QINT32
            type: DT_BFLOAT16
            type: DT_UINT16
            type: DT_COMPLEX128
            type: DT_HALF
            type: DT_UINT32
            type: DT_UINT64
          }
        }
      }
      attr {
        name: "Tidx"
        type: "type"
        default_value {
          type: DT_INT32
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "Merge"
      input_arg {
        name: "inputs"
        type_attr: "T"
        number_attr: "N"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      output_arg {
        name: "value_index"
        type: DT_INT32
      }
      attr {
        name: "T"
        type: "type"
      }
      attr {
        name: "N"
        type: "int"
        has_minimum: true
        minimum: 1
      }
    }
    op {
      name: "Minimum"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      input_arg {
        name: "y"
        type_attr: "T"
      }
      output_arg {
        name: "z"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_BFLOAT16
            type: DT_HALF
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
      is_commutative: true
    }
    op {
      name: "Mul"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      input_arg {
        name: "y"
        type_attr: "T"
      }
      output_arg {
        name: "z"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_BFLOAT16
            type: DT_HALF
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_INT8
            type: DT_UINT16
            type: DT_INT16
            type: DT_INT32
            type: DT_INT64
            type: DT_COMPLEX64
            type: DT_COMPLEX128
          }
        }
      }
      is_commutative: true
    }
    op {
      name: "NoOp"
    }
    op {
      name: "Placeholder"
      output_arg {
        name: "output"
        type_attr: "dtype"
      }
      attr {
        name: "dtype"
        type: "type"
      }
      attr {
        name: "shape"
        type: "shape"
        default_value {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    op {
      name: "Pow"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      input_arg {
        name: "y"
        type_attr: "T"
      }
      output_arg {
        name: "z"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_BFLOAT16
            type: DT_FLOAT
            type: DT_HALF
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_INT64
            type: DT_COMPLEX64
            type: DT_COMPLEX128
          }
        }
      }
    }
    op {
      name: "PreventGradient"
      input_arg {
        name: "input"
        type_attr: "T"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
      }
      attr {
        name: "message"
        type: "string"
        default_value {
          s: ""
        }
      }
    }
    op {
      name: "Prod"
      input_arg {
        name: "input"
        type_attr: "T"
      }
      input_arg {
        name: "reduction_indices"
        type_attr: "Tidx"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "keep_dims"
        type: "bool"
        default_value {
          b: false
        }
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_UINT8
            type: DT_INT16
            type: DT_INT8
            type: DT_COMPLEX64
            type: DT_INT64
            type: DT_QINT8
            type: DT_QUINT8
            type: DT_QINT32
            type: DT_BFLOAT16
            type: DT_UINT16
            type: DT_COMPLEX128
            type: DT_HALF
            type: DT_UINT32
            type: DT_UINT64
          }
        }
      }
      attr {
        name: "Tidx"
        type: "type"
        default_value {
          type: DT_INT32
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "RealDiv"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      input_arg {
        name: "y"
        type_attr: "T"
      }
      output_arg {
        name: "z"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_BFLOAT16
            type: DT_HALF
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_INT8
            type: DT_UINT16
            type: DT_INT16
            type: DT_INT32
            type: DT_INT64
            type: DT_COMPLEX64
            type: DT_COMPLEX128
          }
        }
      }
    }
    op {
      name: "RefSwitch"
      input_arg {
        name: "data"
        type_attr: "T"
        is_ref: true
      }
      input_arg {
        name: "pred"
        type: DT_BOOL
      }
      output_arg {
        name: "output_false"
        type_attr: "T"
        is_ref: true
      }
      output_arg {
        name: "output_true"
        type_attr: "T"
        is_ref: true
      }
      attr {
        name: "T"
        type: "type"
      }
      allows_uninitialized_input: true
    }
    op {
      name: "Reshape"
      input_arg {
        name: "tensor"
        type_attr: "T"
      }
      input_arg {
        name: "shape"
        type_attr: "Tshape"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
      }
      attr {
        name: "Tshape"
        type: "type"
        default_value {
          type: DT_INT32
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "RestoreV2"
      input_arg {
        name: "prefix"
        type: DT_STRING
      }
      input_arg {
        name: "tensor_names"
        type: DT_STRING
      }
      input_arg {
        name: "shape_and_slices"
        type: DT_STRING
      }
      output_arg {
        name: "tensors"
        type_list_attr: "dtypes"
      }
      attr {
        name: "dtypes"
        type: "list(type)"
        has_minimum: true
        minimum: 1
      }
      is_stateful: true
    }
    op {
      name: "SaveV2"
      input_arg {
        name: "prefix"
        type: DT_STRING
      }
      input_arg {
        name: "tensor_names"
        type: DT_STRING
      }
      input_arg {
        name: "shape_and_slices"
        type: DT_STRING
      }
      input_arg {
        name: "tensors"
        type_list_attr: "dtypes"
      }
      attr {
        name: "dtypes"
        type: "list(type)"
        has_minimum: true
        minimum: 1
      }
      is_stateful: true
    }
    op {
      name: "Select"
      input_arg {
        name: "condition"
        type: DT_BOOL
      }
      input_arg {
        name: "t"
        type_attr: "T"
      }
      input_arg {
        name: "e"
        type_attr: "T"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
      }
    }
    op {
      name: "Shape"
      input_arg {
        name: "input"
        type_attr: "T"
      }
      output_arg {
        name: "output"
        type_attr: "out_type"
      }
      attr {
        name: "T"
        type: "type"
      }
      attr {
        name: "out_type"
        type: "type"
        default_value {
          type: DT_INT32
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "SparseSoftmaxCrossEntropyWithLogits"
      input_arg {
        name: "features"
        type_attr: "T"
      }
      input_arg {
        name: "labels"
        type_attr: "Tlabels"
      }
      output_arg {
        name: "loss"
        type_attr: "T"
      }
      output_arg {
        name: "backprop"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_HALF
            type: DT_BFLOAT16
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
      attr {
        name: "Tlabels"
        type: "type"
        default_value {
          type: DT_INT64
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "Sub"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      input_arg {
        name: "y"
        type_attr: "T"
      }
      output_arg {
        name: "z"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_BFLOAT16
            type: DT_HALF
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_INT8
            type: DT_UINT16
            type: DT_INT16
            type: DT_INT32
            type: DT_INT64
            type: DT_COMPLEX64
            type: DT_COMPLEX128
          }
        }
      }
    }
    op {
      name: "Sum"
      input_arg {
        name: "input"
        type_attr: "T"
      }
      input_arg {
        name: "reduction_indices"
        type_attr: "Tidx"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "keep_dims"
        type: "bool"
        default_value {
          b: false
        }
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_FLOAT
            type: DT_DOUBLE
            type: DT_INT32
            type: DT_UINT8
            type: DT_INT16
            type: DT_INT8
            type: DT_COMPLEX64
            type: DT_INT64
            type: DT_QINT8
            type: DT_QUINT8
            type: DT_QINT32
            type: DT_BFLOAT16
            type: DT_UINT16
            type: DT_COMPLEX128
            type: DT_HALF
            type: DT_UINT32
            type: DT_UINT64
          }
        }
      }
      attr {
        name: "Tidx"
        type: "type"
        default_value {
          type: DT_INT32
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "Switch"
      input_arg {
        name: "data"
        type_attr: "T"
      }
      input_arg {
        name: "pred"
        type: DT_BOOL
      }
      output_arg {
        name: "output_false"
        type_attr: "T"
      }
      output_arg {
        name: "output_true"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
      }
    }
    op {
      name: "Tile"
      input_arg {
        name: "input"
        type_attr: "T"
      }
      input_arg {
        name: "multiples"
        type_attr: "Tmultiples"
      }
      output_arg {
        name: "output"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
      }
      attr {
        name: "Tmultiples"
        type: "type"
        default_value {
          type: DT_INT32
        }
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
    }
    op {
      name: "TruncatedNormal"
      input_arg {
        name: "shape"
        type_attr: "T"
      }
      output_arg {
        name: "output"
        type_attr: "dtype"
      }
      attr {
        name: "seed"
        type: "int"
        default_value {
          i: 0
        }
      }
      attr {
        name: "seed2"
        type: "int"
        default_value {
          i: 0
        }
      }
      attr {
        name: "dtype"
        type: "type"
        allowed_values {
          list {
            type: DT_HALF
            type: DT_BFLOAT16
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
      attr {
        name: "T"
        type: "type"
        allowed_values {
          list {
            type: DT_INT32
            type: DT_INT64
          }
        }
      }
      is_stateful: true
    }
    op {
      name: "VariableV2"
      output_arg {
        name: "ref"
        type_attr: "dtype"
        is_ref: true
      }
      attr {
        name: "shape"
        type: "shape"
      }
      attr {
        name: "dtype"
        type: "type"
      }
      attr {
        name: "container"
        type: "string"
        default_value {
          s: ""
        }
      }
      attr {
        name: "shared_name"
        type: "string"
        default_value {
          s: ""
        }
      }
      is_stateful: true
    }
    op {
      name: "ZerosLike"
      input_arg {
        name: "x"
        type_attr: "T"
      }
      output_arg {
        name: "y"
        type_attr: "T"
      }
      attr {
        name: "T"
        type: "type"
      }
    }
  }
  tensorflow_version: "1.12.0"
  tensorflow_git_version: "b\'v1.12.0-rc2-3-ga6d8ffae09\'"
}
graph_def {
  node {
    name: "x-input"
    op: "Placeholder"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 784
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 784
          }
        }
      }
    }
  }
  node {
    name: "y-input"
    op: "Placeholder"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  node {
    name: "truncated_normal/shape"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 2
            }
          }
          tensor_content: "\020\003\000\000\364\001\000\000"
        }
      }
    }
  }
  node {
    name: "truncated_normal/mean"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "truncated_normal/stddev"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.10000000149011612
        }
      }
    }
  }
  node {
    name: "truncated_normal/TruncatedNormal"
    op: "TruncatedNormal"
    input: "truncated_normal/shape"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "seed"
      value {
        i: 0
      }
    }
    attr {
      key: "seed2"
      value {
        i: 0
      }
    }
  }
  node {
    name: "truncated_normal/mul"
    op: "Mul"
    input: "truncated_normal/TruncatedNormal"
    input: "truncated_normal/stddev"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "truncated_normal"
    op: "Add"
    input: "truncated_normal/mul"
    input: "truncated_normal/mean"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable"
    op: "VariableV2"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable/Assign"
    op: "Assign"
    input: "Variable"
    input: "truncated_normal"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable/read"
    op: "Identity"
    input: "Variable"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Const"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 500
            }
          }
          float_val: 0.10000000149011612
        }
      }
    }
  }
  node {
    name: "Variable_1"
    op: "VariableV2"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_1/Assign"
    op: "Assign"
    input: "Variable_1"
    input: "Const"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_1/read"
    op: "Identity"
    input: "Variable_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "truncated_normal_1/shape"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 2
            }
          }
          tensor_content: "\364\001\000\000\n\000\000\000"
        }
      }
    }
  }
  node {
    name: "truncated_normal_1/mean"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "truncated_normal_1/stddev"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.10000000149011612
        }
      }
    }
  }
  node {
    name: "truncated_normal_1/TruncatedNormal"
    op: "TruncatedNormal"
    input: "truncated_normal_1/shape"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "seed"
      value {
        i: 0
      }
    }
    attr {
      key: "seed2"
      value {
        i: 0
      }
    }
  }
  node {
    name: "truncated_normal_1/mul"
    op: "Mul"
    input: "truncated_normal_1/TruncatedNormal"
    input: "truncated_normal_1/stddev"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "truncated_normal_1"
    op: "Add"
    input: "truncated_normal_1/mul"
    input: "truncated_normal_1/mean"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_2"
    op: "VariableV2"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 10
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_2/Assign"
    op: "Assign"
    input: "Variable_2"
    input: "truncated_normal_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_2/read"
    op: "Identity"
    input: "Variable_2"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Const_1"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 10
            }
          }
          float_val: 0.10000000149011612
        }
      }
    }
  }
  node {
    name: "Variable_3"
    op: "VariableV2"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_3/Assign"
    op: "Assign"
    input: "Variable_3"
    input: "Const_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_3/read"
    op: "Identity"
    input: "Variable_3"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "MatMul"
    op: "MatMul"
    input: "x-input"
    input: "Variable/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "transpose_a"
      value {
        b: false
      }
    }
    attr {
      key: "transpose_b"
      value {
        b: false
      }
    }
  }
  node {
    name: "add"
    op: "Add"
    input: "MatMul"
    input: "Variable_1/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "LeakyRelu/alpha"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.20000000298023224
        }
      }
    }
  }
  node {
    name: "LeakyRelu/mul"
    op: "Mul"
    input: "LeakyRelu/alpha"
    input: "add"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "LeakyRelu"
    op: "Maximum"
    input: "LeakyRelu/mul"
    input: "add"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "MatMul_1"
    op: "MatMul"
    input: "LeakyRelu"
    input: "Variable_2/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "transpose_a"
      value {
        b: false
      }
    }
    attr {
      key: "transpose_b"
      value {
        b: false
      }
    }
  }
  node {
    name: "add_1"
    op: "Add"
    input: "MatMul_1"
    input: "Variable_3/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "LeakyRelu_1/alpha"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.20000000298023224
        }
      }
    }
  }
  node {
    name: "LeakyRelu_1/mul"
    op: "Mul"
    input: "LeakyRelu_1/alpha"
    input: "add_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "LeakyRelu_1"
    op: "Maximum"
    input: "LeakyRelu_1/mul"
    input: "add_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_4/initial_value"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
          }
          int_val: 0
        }
      }
    }
  }
  node {
    name: "Variable_4"
    op: "VariableV2"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "shape"
      value {
        shape {
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_4/Assign"
    op: "Assign"
    input: "Variable_4"
    input: "Variable_4/initial_value"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_4"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_4/read"
    op: "Identity"
    input: "Variable_4"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_4"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "IsVariableInitialized"
    op: "IsVariableInitialized"
    input: "Variable"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
  }
  node {
    name: "cond/Switch"
    op: "Switch"
    input: "IsVariableInitialized"
    input: "IsVariableInitialized"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond/switch_t"
    op: "Identity"
    input: "cond/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond/switch_f"
    op: "Identity"
    input: "cond/Switch"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond/pred_id"
    op: "Identity"
    input: "IsVariableInitialized"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond/read"
    op: "Identity"
    input: "cond/read/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "cond/read/Switch"
    op: "RefSwitch"
    input: "Variable"
    input: "cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "cond/Switch_1"
    op: "Switch"
    input: "truncated_normal"
    input: "cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@truncated_normal"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "cond/Merge"
    op: "Merge"
    input: "cond/Switch_1"
    input: "cond/read"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/IsVariableInitialized"
    op: "IsVariableInitialized"
    input: "Variable"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/Switch"
    op: "Switch"
    input: "Variable/ExponentialMovingAverage/IsVariableInitialized"
    input: "Variable/ExponentialMovingAverage/IsVariableInitialized"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/switch_t"
    op: "Identity"
    input: "Variable/ExponentialMovingAverage/cond/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/switch_f"
    op: "Identity"
    input: "Variable/ExponentialMovingAverage/cond/Switch"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/pred_id"
    op: "Identity"
    input: "Variable/ExponentialMovingAverage/IsVariableInitialized"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/read"
    op: "Identity"
    input: "Variable/ExponentialMovingAverage/cond/read/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/read/Switch"
    op: "RefSwitch"
    input: "Variable"
    input: "Variable/ExponentialMovingAverage/cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/Switch_1"
    op: "Switch"
    input: "truncated_normal"
    input: "Variable/ExponentialMovingAverage/cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@truncated_normal"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/Merge"
    op: "Merge"
    input: "Variable/ExponentialMovingAverage/cond/Switch_1"
    input: "Variable/ExponentialMovingAverage/cond/read"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/read/Switch_Variable/ExponentialMovingAverage_0"
    op: "Switch"
    input: "Variable/ExponentialMovingAverage/cond/Merge"
    input: "cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/read_Variable/ExponentialMovingAverage_0"
    op: "Identity"
    input: "Variable/ExponentialMovingAverage/cond/read/Switch_Variable/ExponentialMovingAverage_0:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/cond/Merge_Variable/ExponentialMovingAverage_0"
    op: "Merge"
    input: "cond/Switch_1"
    input: "Variable/ExponentialMovingAverage/cond/read_Variable/ExponentialMovingAverage_0"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/Assign"
    op: "Assign"
    input: "Variable/ExponentialMovingAverage"
    input: "Variable/ExponentialMovingAverage/cond/Merge_Variable/ExponentialMovingAverage_0"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable/ExponentialMovingAverage/read"
    op: "Identity"
    input: "Variable/ExponentialMovingAverage"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "IsVariableInitialized_1"
    op: "IsVariableInitialized"
    input: "Variable_1"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
  }
  node {
    name: "cond_1/Switch"
    op: "Switch"
    input: "IsVariableInitialized_1"
    input: "IsVariableInitialized_1"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_1/switch_t"
    op: "Identity"
    input: "cond_1/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_1/switch_f"
    op: "Identity"
    input: "cond_1/Switch"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_1/pred_id"
    op: "Identity"
    input: "IsVariableInitialized_1"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_1/read"
    op: "Identity"
    input: "cond_1/read/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "cond_1/read/Switch"
    op: "RefSwitch"
    input: "Variable_1"
    input: "cond_1/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "cond_1/Switch_1"
    op: "Switch"
    input: "Const"
    input: "cond_1/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Const"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "cond_1/Merge"
    op: "Merge"
    input: "cond_1/Switch_1"
    input: "cond_1/read"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/IsVariableInitialized"
    op: "IsVariableInitialized"
    input: "Variable_1"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond/Switch"
    op: "Switch"
    input: "Variable_1/ExponentialMovingAverage/IsVariableInitialized"
    input: "Variable_1/ExponentialMovingAverage/IsVariableInitialized"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond/switch_t"
    op: "Identity"
    input: "Variable_1/ExponentialMovingAverage/cond/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond/switch_f"
    op: "Identity"
    input: "Variable_1/ExponentialMovingAverage/cond/Switch"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond/pred_id"
    op: "Identity"
    input: "Variable_1/ExponentialMovingAverage/IsVariableInitialized"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond/read"
    op: "Identity"
    input: "Variable_1/ExponentialMovingAverage/cond/read/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond/read/Switch"
    op: "RefSwitch"
    input: "Variable_1"
    input: "Variable_1/ExponentialMovingAverage/cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond/Switch_1"
    op: "Switch"
    input: "Const"
    input: "Variable_1/ExponentialMovingAverage/cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Const"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond/Merge"
    op: "Merge"
    input: "Variable_1/ExponentialMovingAverage/cond/Switch_1"
    input: "Variable_1/ExponentialMovingAverage/cond/read"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond_1/read/Switch_Variable_1/ExponentialMovingAverage_0"
    op: "Switch"
    input: "Variable_1/ExponentialMovingAverage/cond/Merge"
    input: "cond_1/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond_1/read_Variable_1/ExponentialMovingAverage_0"
    op: "Identity"
    input: "Variable_1/ExponentialMovingAverage/cond_1/read/Switch_Variable_1/ExponentialMovingAverage_0:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/cond_1/Merge_Variable_1/ExponentialMovingAverage_0"
    op: "Merge"
    input: "cond_1/Switch_1"
    input: "Variable_1/ExponentialMovingAverage/cond_1/read_Variable_1/ExponentialMovingAverage_0"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/Assign"
    op: "Assign"
    input: "Variable_1/ExponentialMovingAverage"
    input: "Variable_1/ExponentialMovingAverage/cond_1/Merge_Variable_1/ExponentialMovingAverage_0"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_1/ExponentialMovingAverage/read"
    op: "Identity"
    input: "Variable_1/ExponentialMovingAverage"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "IsVariableInitialized_2"
    op: "IsVariableInitialized"
    input: "Variable_2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
  }
  node {
    name: "cond_2/Switch"
    op: "Switch"
    input: "IsVariableInitialized_2"
    input: "IsVariableInitialized_2"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_2/switch_t"
    op: "Identity"
    input: "cond_2/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_2/switch_f"
    op: "Identity"
    input: "cond_2/Switch"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_2/pred_id"
    op: "Identity"
    input: "IsVariableInitialized_2"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_2/read"
    op: "Identity"
    input: "cond_2/read/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "cond_2/read/Switch"
    op: "RefSwitch"
    input: "Variable_2"
    input: "cond_2/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "cond_2/Switch_1"
    op: "Switch"
    input: "truncated_normal_1"
    input: "cond_2/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@truncated_normal_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "cond_2/Merge"
    op: "Merge"
    input: "cond_2/Switch_1"
    input: "cond_2/read"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 10
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/IsVariableInitialized"
    op: "IsVariableInitialized"
    input: "Variable_2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond/Switch"
    op: "Switch"
    input: "Variable_2/ExponentialMovingAverage/IsVariableInitialized"
    input: "Variable_2/ExponentialMovingAverage/IsVariableInitialized"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond/switch_t"
    op: "Identity"
    input: "Variable_2/ExponentialMovingAverage/cond/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond/switch_f"
    op: "Identity"
    input: "Variable_2/ExponentialMovingAverage/cond/Switch"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond/pred_id"
    op: "Identity"
    input: "Variable_2/ExponentialMovingAverage/IsVariableInitialized"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond/read"
    op: "Identity"
    input: "Variable_2/ExponentialMovingAverage/cond/read/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond/read/Switch"
    op: "RefSwitch"
    input: "Variable_2"
    input: "Variable_2/ExponentialMovingAverage/cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond/Switch_1"
    op: "Switch"
    input: "truncated_normal_1"
    input: "Variable_2/ExponentialMovingAverage/cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@truncated_normal_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond/Merge"
    op: "Merge"
    input: "Variable_2/ExponentialMovingAverage/cond/Switch_1"
    input: "Variable_2/ExponentialMovingAverage/cond/read"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond_2/read/Switch_Variable_2/ExponentialMovingAverage_0"
    op: "Switch"
    input: "Variable_2/ExponentialMovingAverage/cond/Merge"
    input: "cond_2/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond_2/read_Variable_2/ExponentialMovingAverage_0"
    op: "Identity"
    input: "Variable_2/ExponentialMovingAverage/cond_2/read/Switch_Variable_2/ExponentialMovingAverage_0:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/cond_2/Merge_Variable_2/ExponentialMovingAverage_0"
    op: "Merge"
    input: "cond_2/Switch_1"
    input: "Variable_2/ExponentialMovingAverage/cond_2/read_Variable_2/ExponentialMovingAverage_0"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/Assign"
    op: "Assign"
    input: "Variable_2/ExponentialMovingAverage"
    input: "Variable_2/ExponentialMovingAverage/cond_2/Merge_Variable_2/ExponentialMovingAverage_0"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_2/ExponentialMovingAverage/read"
    op: "Identity"
    input: "Variable_2/ExponentialMovingAverage"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "IsVariableInitialized_3"
    op: "IsVariableInitialized"
    input: "Variable_3"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
  }
  node {
    name: "cond_3/Switch"
    op: "Switch"
    input: "IsVariableInitialized_3"
    input: "IsVariableInitialized_3"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_3/switch_t"
    op: "Identity"
    input: "cond_3/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_3/switch_f"
    op: "Identity"
    input: "cond_3/Switch"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_3/pred_id"
    op: "Identity"
    input: "IsVariableInitialized_3"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "cond_3/read"
    op: "Identity"
    input: "cond_3/read/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "cond_3/read/Switch"
    op: "RefSwitch"
    input: "Variable_3"
    input: "cond_3/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "cond_3/Switch_1"
    op: "Switch"
    input: "Const_1"
    input: "cond_3/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Const_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "cond_3/Merge"
    op: "Merge"
    input: "cond_3/Switch_1"
    input: "cond_3/read"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/IsVariableInitialized"
    op: "IsVariableInitialized"
    input: "Variable_3"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond/Switch"
    op: "Switch"
    input: "Variable_3/ExponentialMovingAverage/IsVariableInitialized"
    input: "Variable_3/ExponentialMovingAverage/IsVariableInitialized"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond/switch_t"
    op: "Identity"
    input: "Variable_3/ExponentialMovingAverage/cond/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond/switch_f"
    op: "Identity"
    input: "Variable_3/ExponentialMovingAverage/cond/Switch"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond/pred_id"
    op: "Identity"
    input: "Variable_3/ExponentialMovingAverage/IsVariableInitialized"
    attr {
      key: "T"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond/read"
    op: "Identity"
    input: "Variable_3/ExponentialMovingAverage/cond/read/Switch:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond/read/Switch"
    op: "RefSwitch"
    input: "Variable_3"
    input: "Variable_3/ExponentialMovingAverage/cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond/Switch_1"
    op: "Switch"
    input: "Const_1"
    input: "Variable_3/ExponentialMovingAverage/cond/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Const_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond/Merge"
    op: "Merge"
    input: "Variable_3/ExponentialMovingAverage/cond/Switch_1"
    input: "Variable_3/ExponentialMovingAverage/cond/read"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond_3/read/Switch_Variable_3/ExponentialMovingAverage_0"
    op: "Switch"
    input: "Variable_3/ExponentialMovingAverage/cond/Merge"
    input: "cond_3/pred_id"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond_3/read_Variable_3/ExponentialMovingAverage_0"
    op: "Identity"
    input: "Variable_3/ExponentialMovingAverage/cond_3/read/Switch_Variable_3/ExponentialMovingAverage_0:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/cond_3/Merge_Variable_3/ExponentialMovingAverage_0"
    op: "Merge"
    input: "cond_3/Switch_1"
    input: "Variable_3/ExponentialMovingAverage/cond_3/read_Variable_3/ExponentialMovingAverage_0"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
          shape {
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/Assign"
    op: "Assign"
    input: "Variable_3/ExponentialMovingAverage"
    input: "Variable_3/ExponentialMovingAverage/cond_3/Merge_Variable_3/ExponentialMovingAverage_0"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_3/ExponentialMovingAverage/read"
    op: "Identity"
    input: "Variable_3/ExponentialMovingAverage"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/decay"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.9900000095367432
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/num_updates"
    op: "Cast"
    input: "Variable_4/read"
    attr {
      key: "DstT"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "SrcT"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "Truncate"
      value {
        b: false
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/add/x"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 1.0
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/add"
    op: "Add"
    input: "ExponentialMovingAverage/add/x"
    input: "ExponentialMovingAverage/num_updates"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/add_1/x"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 10.0
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/add_1"
    op: "Add"
    input: "ExponentialMovingAverage/add_1/x"
    input: "ExponentialMovingAverage/num_updates"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/truediv"
    op: "RealDiv"
    input: "ExponentialMovingAverage/add"
    input: "ExponentialMovingAverage/add_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/Minimum"
    op: "Minimum"
    input: "ExponentialMovingAverage/decay"
    input: "ExponentialMovingAverage/truediv"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 1.0
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg/sub"
    op: "Sub"
    input: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
    input: "ExponentialMovingAverage/Minimum"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
    op: "Sub"
    input: "Variable/ExponentialMovingAverage/read"
    input: "Variable/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg/mul"
    op: "Mul"
    input: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
    input: "ExponentialMovingAverage/AssignMovingAvg/sub"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg"
    op: "AssignSub"
    input: "Variable/ExponentialMovingAverage"
    input: "ExponentialMovingAverage/AssignMovingAvg/mul"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: false
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 1.0
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
    op: "Sub"
    input: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
    input: "ExponentialMovingAverage/Minimum"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
    op: "Sub"
    input: "Variable_1/ExponentialMovingAverage/read"
    input: "Variable_1/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
    op: "Mul"
    input: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
    input: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_1"
    op: "AssignSub"
    input: "Variable_1/ExponentialMovingAverage"
    input: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: false
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 1.0
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
    op: "Sub"
    input: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
    input: "ExponentialMovingAverage/Minimum"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
    op: "Sub"
    input: "Variable_2/ExponentialMovingAverage/read"
    input: "Variable_2/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
    op: "Mul"
    input: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
    input: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_2"
    op: "AssignSub"
    input: "Variable_2/ExponentialMovingAverage"
    input: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: false
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 1.0
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_3/sub"
    op: "Sub"
    input: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x"
    input: "ExponentialMovingAverage/Minimum"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1"
    op: "Sub"
    input: "Variable_3/ExponentialMovingAverage/read"
    input: "Variable_3/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_3/mul"
    op: "Mul"
    input: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1"
    input: "ExponentialMovingAverage/AssignMovingAvg_3/sub"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "ExponentialMovingAverage/AssignMovingAvg_3"
    op: "AssignSub"
    input: "Variable_3/ExponentialMovingAverage"
    input: "ExponentialMovingAverage/AssignMovingAvg_3/mul"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: false
      }
    }
  }
  node {
    name: "ExponentialMovingAverage"
    op: "NoOp"
    input: "^ExponentialMovingAverage/AssignMovingAvg"
    input: "^ExponentialMovingAverage/AssignMovingAvg_1"
    input: "^ExponentialMovingAverage/AssignMovingAvg_2"
    input: "^ExponentialMovingAverage/AssignMovingAvg_3"
  }
  node {
    name: "MatMul_2"
    op: "MatMul"
    input: "x-input"
    input: "Variable/ExponentialMovingAverage/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "transpose_a"
      value {
        b: false
      }
    }
    attr {
      key: "transpose_b"
      value {
        b: false
      }
    }
  }
  node {
    name: "add_2"
    op: "Add"
    input: "MatMul_2"
    input: "Variable_1/ExponentialMovingAverage/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "LeakyRelu_2/alpha"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.20000000298023224
        }
      }
    }
  }
  node {
    name: "LeakyRelu_2/mul"
    op: "Mul"
    input: "LeakyRelu_2/alpha"
    input: "add_2"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "LeakyRelu_2"
    op: "Maximum"
    input: "LeakyRelu_2/mul"
    input: "add_2"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "MatMul_3"
    op: "MatMul"
    input: "LeakyRelu_2"
    input: "Variable_2/ExponentialMovingAverage/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "transpose_a"
      value {
        b: false
      }
    }
    attr {
      key: "transpose_b"
      value {
        b: false
      }
    }
  }
  node {
    name: "add_3"
    op: "Add"
    input: "MatMul_3"
    input: "Variable_3/ExponentialMovingAverage/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "LeakyRelu_3/alpha"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.20000000298023224
        }
      }
    }
  }
  node {
    name: "LeakyRelu_3/mul"
    op: "Mul"
    input: "LeakyRelu_3/alpha"
    input: "add_3"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "LeakyRelu_3"
    op: "Maximum"
    input: "LeakyRelu_3/mul"
    input: "add_3"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "ArgMax/dimension"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
          }
          int_val: 1
        }
      }
    }
  }
  node {
    name: "ArgMax"
    op: "ArgMax"
    input: "y-input"
    input: "ArgMax/dimension"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    attr {
      key: "output_type"
      value {
        type: DT_INT64
      }
    }
  }
  node {
    name: "SparseSoftmaxCrossEntropyWithLogits/Shape"
    op: "Shape"
    input: "ArgMax"
    attr {
      key: "T"
      value {
        type: DT_INT64
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
    op: "SparseSoftmaxCrossEntropyWithLogits"
    input: "LeakyRelu_1"
    input: "ArgMax"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tlabels"
      value {
        type: DT_INT64
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Const_2"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 1
            }
          }
          int_val: 0
        }
      }
    }
  }
  node {
    name: "Mean"
    op: "Mean"
    input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
    input: "Const_2"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "l2_regularizer/scale"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 9.999999747378752e-05
        }
      }
    }
  }
  node {
    name: "l2_regularizer/L2Loss"
    op: "L2Loss"
    input: "Variable/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "l2_regularizer"
    op: "Mul"
    input: "l2_regularizer/scale"
    input: "l2_regularizer/L2Loss"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "l2_regularizer_1/scale"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 9.999999747378752e-05
        }
      }
    }
  }
  node {
    name: "l2_regularizer_1/L2Loss"
    op: "L2Loss"
    input: "Variable_2/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "l2_regularizer_1"
    op: "Mul"
    input: "l2_regularizer_1/scale"
    input: "l2_regularizer_1/L2Loss"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "add_4"
    op: "Add"
    input: "l2_regularizer"
    input: "l2_regularizer_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "add_5"
    op: "Add"
    input: "add_4"
    input: "Mean"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialDecay/learning_rate"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.800000011920929
        }
      }
    }
  }
  node {
    name: "ExponentialDecay/Cast/x"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 550.0
        }
      }
    }
  }
  node {
    name: "ExponentialDecay/Cast_1/x"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.9900000095367432
        }
      }
    }
  }
  node {
    name: "ExponentialDecay/Cast_2"
    op: "Cast"
    input: "Variable_4/read"
    attr {
      key: "DstT"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "SrcT"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "Truncate"
      value {
        b: false
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialDecay/truediv"
    op: "RealDiv"
    input: "ExponentialDecay/Cast_2"
    input: "ExponentialDecay/Cast/x"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialDecay/Pow"
    op: "Pow"
    input: "ExponentialDecay/Cast_1/x"
    input: "ExponentialDecay/truediv"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "ExponentialDecay"
    op: "Mul"
    input: "ExponentialDecay/learning_rate"
    input: "ExponentialDecay/Pow"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/Shape"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/grad_ys_0"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 1.0
        }
      }
    }
  }
  node {
    name: "gradients/Fill"
    op: "Fill"
    input: "gradients/Shape"
    input: "gradients/grad_ys_0"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "index_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/add_5_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/Fill"
  }
  node {
    name: "gradients/add_5_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/Fill"
    input: "^gradients/add_5_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/Fill"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_5_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/Fill"
    input: "^gradients/add_5_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/Fill"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_4_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/add_5_grad/tuple/control_dependency"
  }
  node {
    name: "gradients/add_4_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/add_5_grad/tuple/control_dependency"
    input: "^gradients/add_4_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/Fill"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_4_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/add_5_grad/tuple/control_dependency"
    input: "^gradients/add_4_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/Fill"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Reshape/shape"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 1
            }
          }
          int_val: 1
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Reshape"
    op: "Reshape"
    input: "gradients/add_5_grad/tuple/control_dependency_1"
    input: "gradients/Mean_grad/Reshape/shape"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Shape"
    op: "Shape"
    input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Tile"
    op: "Tile"
    input: "gradients/Mean_grad/Reshape"
    input: "gradients/Mean_grad/Shape"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tmultiples"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Shape_1"
    op: "Shape"
    input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Shape_2"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Const"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 1
            }
          }
          int_val: 0
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Prod"
    op: "Prod"
    input: "gradients/Mean_grad/Shape_1"
    input: "gradients/Mean_grad/Const"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Const_1"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 1
            }
          }
          int_val: 0
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Prod_1"
    op: "Prod"
    input: "gradients/Mean_grad/Shape_2"
    input: "gradients/Mean_grad/Const_1"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Maximum/y"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
          }
          int_val: 1
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Maximum"
    op: "Maximum"
    input: "gradients/Mean_grad/Prod_1"
    input: "gradients/Mean_grad/Maximum/y"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/floordiv"
    op: "FloorDiv"
    input: "gradients/Mean_grad/Prod"
    input: "gradients/Mean_grad/Maximum"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/Cast"
    op: "Cast"
    input: "gradients/Mean_grad/floordiv"
    attr {
      key: "DstT"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "SrcT"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "Truncate"
      value {
        b: false
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/Mean_grad/truediv"
    op: "RealDiv"
    input: "gradients/Mean_grad/Tile"
    input: "gradients/Mean_grad/Cast"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/l2_regularizer_grad/Mul"
    op: "Mul"
    input: "gradients/add_4_grad/tuple/control_dependency"
    input: "l2_regularizer/L2Loss"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/l2_regularizer_grad/Mul_1"
    op: "Mul"
    input: "gradients/add_4_grad/tuple/control_dependency"
    input: "l2_regularizer/scale"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/l2_regularizer_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/l2_regularizer_grad/Mul"
    input: "^gradients/l2_regularizer_grad/Mul_1"
  }
  node {
    name: "gradients/l2_regularizer_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/l2_regularizer_grad/Mul"
    input: "^gradients/l2_regularizer_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/l2_regularizer_grad/Mul"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/l2_regularizer_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/l2_regularizer_grad/Mul_1"
    input: "^gradients/l2_regularizer_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/l2_regularizer_grad/Mul_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/l2_regularizer_1_grad/Mul"
    op: "Mul"
    input: "gradients/add_4_grad/tuple/control_dependency_1"
    input: "l2_regularizer_1/L2Loss"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/l2_regularizer_1_grad/Mul_1"
    op: "Mul"
    input: "gradients/add_4_grad/tuple/control_dependency_1"
    input: "l2_regularizer_1/scale"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/l2_regularizer_1_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/l2_regularizer_1_grad/Mul"
    input: "^gradients/l2_regularizer_1_grad/Mul_1"
  }
  node {
    name: "gradients/l2_regularizer_1_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/l2_regularizer_1_grad/Mul"
    input: "^gradients/l2_regularizer_1_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/l2_regularizer_1_grad/Mul"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/l2_regularizer_1_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/l2_regularizer_1_grad/Mul_1"
    input: "^gradients/l2_regularizer_1_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/l2_regularizer_1_grad/Mul_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/zeros_like"
    op: "ZerosLike"
    input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
    op: "PreventGradient"
    input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "message"
      value {
        s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
      }
    }
  }
  node {
    name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
          }
          int_val: -1
        }
      }
    }
  }
  node {
    name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
    op: "ExpandDims"
    input: "gradients/Mean_grad/truediv"
    input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tdim"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
    op: "Mul"
    input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
    input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/l2_regularizer/L2Loss_grad/mul"
    op: "Mul"
    input: "Variable/read"
    input: "gradients/l2_regularizer_grad/tuple/control_dependency_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/l2_regularizer_1/L2Loss_grad/mul"
    op: "Mul"
    input: "Variable_2/read"
    input: "gradients/l2_regularizer_1_grad/tuple/control_dependency_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/Shape"
    op: "Shape"
    input: "LeakyRelu_1/mul"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/Shape_1"
    op: "Shape"
    input: "add_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/Shape_2"
    op: "Shape"
    input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/zeros/Const"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/zeros"
    op: "Fill"
    input: "gradients/LeakyRelu_1_grad/Shape_2"
    input: "gradients/LeakyRelu_1_grad/zeros/Const"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "index_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/GreaterEqual"
    op: "GreaterEqual"
    input: "LeakyRelu_1/mul"
    input: "add_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/BroadcastGradientArgs"
    op: "BroadcastGradientArgs"
    input: "gradients/LeakyRelu_1_grad/Shape"
    input: "gradients/LeakyRelu_1_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/Select"
    op: "Select"
    input: "gradients/LeakyRelu_1_grad/GreaterEqual"
    input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
    input: "gradients/LeakyRelu_1_grad/zeros"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/Select_1"
    op: "Select"
    input: "gradients/LeakyRelu_1_grad/GreaterEqual"
    input: "gradients/LeakyRelu_1_grad/zeros"
    input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/Sum"
    op: "Sum"
    input: "gradients/LeakyRelu_1_grad/Select"
    input: "gradients/LeakyRelu_1_grad/BroadcastGradientArgs"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/Reshape"
    op: "Reshape"
    input: "gradients/LeakyRelu_1_grad/Sum"
    input: "gradients/LeakyRelu_1_grad/Shape"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/Sum_1"
    op: "Sum"
    input: "gradients/LeakyRelu_1_grad/Select_1"
    input: "gradients/LeakyRelu_1_grad/BroadcastGradientArgs:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/Reshape_1"
    op: "Reshape"
    input: "gradients/LeakyRelu_1_grad/Sum_1"
    input: "gradients/LeakyRelu_1_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/LeakyRelu_1_grad/Reshape"
    input: "^gradients/LeakyRelu_1_grad/Reshape_1"
  }
  node {
    name: "gradients/LeakyRelu_1_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/LeakyRelu_1_grad/Reshape"
    input: "^gradients/LeakyRelu_1_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/LeakyRelu_1_grad/Reshape"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/LeakyRelu_1_grad/Reshape_1"
    input: "^gradients/LeakyRelu_1_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/LeakyRelu_1_grad/Reshape_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/Shape"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/Shape_1"
    op: "Shape"
    input: "add_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/BroadcastGradientArgs"
    op: "BroadcastGradientArgs"
    input: "gradients/LeakyRelu_1/mul_grad/Shape"
    input: "gradients/LeakyRelu_1/mul_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/Mul"
    op: "Mul"
    input: "gradients/LeakyRelu_1_grad/tuple/control_dependency"
    input: "add_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/Sum"
    op: "Sum"
    input: "gradients/LeakyRelu_1/mul_grad/Mul"
    input: "gradients/LeakyRelu_1/mul_grad/BroadcastGradientArgs"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/Reshape"
    op: "Reshape"
    input: "gradients/LeakyRelu_1/mul_grad/Sum"
    input: "gradients/LeakyRelu_1/mul_grad/Shape"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/Mul_1"
    op: "Mul"
    input: "LeakyRelu_1/alpha"
    input: "gradients/LeakyRelu_1_grad/tuple/control_dependency"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/Sum_1"
    op: "Sum"
    input: "gradients/LeakyRelu_1/mul_grad/Mul_1"
    input: "gradients/LeakyRelu_1/mul_grad/BroadcastGradientArgs:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/Reshape_1"
    op: "Reshape"
    input: "gradients/LeakyRelu_1/mul_grad/Sum_1"
    input: "gradients/LeakyRelu_1/mul_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/LeakyRelu_1/mul_grad/Reshape"
    input: "^gradients/LeakyRelu_1/mul_grad/Reshape_1"
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/LeakyRelu_1/mul_grad/Reshape"
    input: "^gradients/LeakyRelu_1/mul_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/LeakyRelu_1/mul_grad/Reshape"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_1/mul_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/LeakyRelu_1/mul_grad/Reshape_1"
    input: "^gradients/LeakyRelu_1/mul_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/LeakyRelu_1/mul_grad/Reshape_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/AddN"
    op: "AddN"
    input: "gradients/LeakyRelu_1_grad/tuple/control_dependency_1"
    input: "gradients/LeakyRelu_1/mul_grad/tuple/control_dependency_1"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/LeakyRelu_1_grad/Reshape_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_1_grad/Shape"
    op: "Shape"
    input: "MatMul_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/add_1_grad/Shape_1"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 1
            }
          }
          int_val: 10
        }
      }
    }
  }
  node {
    name: "gradients/add_1_grad/BroadcastGradientArgs"
    op: "BroadcastGradientArgs"
    input: "gradients/add_1_grad/Shape"
    input: "gradients/add_1_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_1_grad/Sum"
    op: "Sum"
    input: "gradients/AddN"
    input: "gradients/add_1_grad/BroadcastGradientArgs"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/add_1_grad/Reshape"
    op: "Reshape"
    input: "gradients/add_1_grad/Sum"
    input: "gradients/add_1_grad/Shape"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_1_grad/Sum_1"
    op: "Sum"
    input: "gradients/AddN"
    input: "gradients/add_1_grad/BroadcastGradientArgs:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/add_1_grad/Reshape_1"
    op: "Reshape"
    input: "gradients/add_1_grad/Sum_1"
    input: "gradients/add_1_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_1_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/add_1_grad/Reshape"
    input: "^gradients/add_1_grad/Reshape_1"
  }
  node {
    name: "gradients/add_1_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/add_1_grad/Reshape"
    input: "^gradients/add_1_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/add_1_grad/Reshape"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_1_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/add_1_grad/Reshape_1"
    input: "^gradients/add_1_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/add_1_grad/Reshape_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/MatMul_1_grad/MatMul"
    op: "MatMul"
    input: "gradients/add_1_grad/tuple/control_dependency"
    input: "Variable_2/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "transpose_a"
      value {
        b: false
      }
    }
    attr {
      key: "transpose_b"
      value {
        b: true
      }
    }
  }
  node {
    name: "gradients/MatMul_1_grad/MatMul_1"
    op: "MatMul"
    input: "LeakyRelu"
    input: "gradients/add_1_grad/tuple/control_dependency"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "transpose_a"
      value {
        b: true
      }
    }
    attr {
      key: "transpose_b"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/MatMul_1_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/MatMul_1_grad/MatMul"
    input: "^gradients/MatMul_1_grad/MatMul_1"
  }
  node {
    name: "gradients/MatMul_1_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/MatMul_1_grad/MatMul"
    input: "^gradients/MatMul_1_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/MatMul_1_grad/MatMul"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/MatMul_1_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/MatMul_1_grad/MatMul_1"
    input: "^gradients/MatMul_1_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/MatMul_1_grad/MatMul_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/Shape"
    op: "Shape"
    input: "LeakyRelu/mul"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/Shape_1"
    op: "Shape"
    input: "add"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/Shape_2"
    op: "Shape"
    input: "gradients/MatMul_1_grad/tuple/control_dependency"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/zeros/Const"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/zeros"
    op: "Fill"
    input: "gradients/LeakyRelu_grad/Shape_2"
    input: "gradients/LeakyRelu_grad/zeros/Const"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "index_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/GreaterEqual"
    op: "GreaterEqual"
    input: "LeakyRelu/mul"
    input: "add"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/BroadcastGradientArgs"
    op: "BroadcastGradientArgs"
    input: "gradients/LeakyRelu_grad/Shape"
    input: "gradients/LeakyRelu_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/Select"
    op: "Select"
    input: "gradients/LeakyRelu_grad/GreaterEqual"
    input: "gradients/MatMul_1_grad/tuple/control_dependency"
    input: "gradients/LeakyRelu_grad/zeros"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/Select_1"
    op: "Select"
    input: "gradients/LeakyRelu_grad/GreaterEqual"
    input: "gradients/LeakyRelu_grad/zeros"
    input: "gradients/MatMul_1_grad/tuple/control_dependency"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/Sum"
    op: "Sum"
    input: "gradients/LeakyRelu_grad/Select"
    input: "gradients/LeakyRelu_grad/BroadcastGradientArgs"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/Reshape"
    op: "Reshape"
    input: "gradients/LeakyRelu_grad/Sum"
    input: "gradients/LeakyRelu_grad/Shape"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/Sum_1"
    op: "Sum"
    input: "gradients/LeakyRelu_grad/Select_1"
    input: "gradients/LeakyRelu_grad/BroadcastGradientArgs:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/Reshape_1"
    op: "Reshape"
    input: "gradients/LeakyRelu_grad/Sum_1"
    input: "gradients/LeakyRelu_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/LeakyRelu_grad/Reshape"
    input: "^gradients/LeakyRelu_grad/Reshape_1"
  }
  node {
    name: "gradients/LeakyRelu_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/LeakyRelu_grad/Reshape"
    input: "^gradients/LeakyRelu_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/LeakyRelu_grad/Reshape"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/LeakyRelu_grad/Reshape_1"
    input: "^gradients/LeakyRelu_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/LeakyRelu_grad/Reshape_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/AddN_1"
    op: "AddN"
    input: "gradients/l2_regularizer_1/L2Loss_grad/mul"
    input: "gradients/MatMul_1_grad/tuple/control_dependency_1"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/l2_regularizer_1/L2Loss_grad/mul"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/Shape"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/Shape_1"
    op: "Shape"
    input: "add"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/BroadcastGradientArgs"
    op: "BroadcastGradientArgs"
    input: "gradients/LeakyRelu/mul_grad/Shape"
    input: "gradients/LeakyRelu/mul_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/Mul"
    op: "Mul"
    input: "gradients/LeakyRelu_grad/tuple/control_dependency"
    input: "add"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/Sum"
    op: "Sum"
    input: "gradients/LeakyRelu/mul_grad/Mul"
    input: "gradients/LeakyRelu/mul_grad/BroadcastGradientArgs"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/Reshape"
    op: "Reshape"
    input: "gradients/LeakyRelu/mul_grad/Sum"
    input: "gradients/LeakyRelu/mul_grad/Shape"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/Mul_1"
    op: "Mul"
    input: "LeakyRelu/alpha"
    input: "gradients/LeakyRelu_grad/tuple/control_dependency"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/Sum_1"
    op: "Sum"
    input: "gradients/LeakyRelu/mul_grad/Mul_1"
    input: "gradients/LeakyRelu/mul_grad/BroadcastGradientArgs:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/Reshape_1"
    op: "Reshape"
    input: "gradients/LeakyRelu/mul_grad/Sum_1"
    input: "gradients/LeakyRelu/mul_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/LeakyRelu/mul_grad/Reshape"
    input: "^gradients/LeakyRelu/mul_grad/Reshape_1"
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/LeakyRelu/mul_grad/Reshape"
    input: "^gradients/LeakyRelu/mul_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/LeakyRelu/mul_grad/Reshape"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "gradients/LeakyRelu/mul_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/LeakyRelu/mul_grad/Reshape_1"
    input: "^gradients/LeakyRelu/mul_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/LeakyRelu/mul_grad/Reshape_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/AddN_2"
    op: "AddN"
    input: "gradients/LeakyRelu_grad/tuple/control_dependency_1"
    input: "gradients/LeakyRelu/mul_grad/tuple/control_dependency_1"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/LeakyRelu_grad/Reshape_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_grad/Shape"
    op: "Shape"
    input: "MatMul"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "out_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "gradients/add_grad/Shape_1"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 1
            }
          }
          int_val: 500
        }
      }
    }
  }
  node {
    name: "gradients/add_grad/BroadcastGradientArgs"
    op: "BroadcastGradientArgs"
    input: "gradients/add_grad/Shape"
    input: "gradients/add_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_grad/Sum"
    op: "Sum"
    input: "gradients/AddN_2"
    input: "gradients/add_grad/BroadcastGradientArgs"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/add_grad/Reshape"
    op: "Reshape"
    input: "gradients/add_grad/Sum"
    input: "gradients/add_grad/Shape"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_grad/Sum_1"
    op: "Sum"
    input: "gradients/AddN_2"
    input: "gradients/add_grad/BroadcastGradientArgs:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/add_grad/Reshape_1"
    op: "Reshape"
    input: "gradients/add_grad/Sum_1"
    input: "gradients/add_grad/Shape_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tshape"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/add_grad/Reshape"
    input: "^gradients/add_grad/Reshape_1"
  }
  node {
    name: "gradients/add_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/add_grad/Reshape"
    input: "^gradients/add_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/add_grad/Reshape"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/add_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/add_grad/Reshape_1"
    input: "^gradients/add_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/add_grad/Reshape_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/MatMul_grad/MatMul"
    op: "MatMul"
    input: "gradients/add_grad/tuple/control_dependency"
    input: "Variable/read"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 784
            }
          }
        }
      }
    }
    attr {
      key: "transpose_a"
      value {
        b: false
      }
    }
    attr {
      key: "transpose_b"
      value {
        b: true
      }
    }
  }
  node {
    name: "gradients/MatMul_grad/MatMul_1"
    op: "MatMul"
    input: "x-input"
    input: "gradients/add_grad/tuple/control_dependency"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "transpose_a"
      value {
        b: true
      }
    }
    attr {
      key: "transpose_b"
      value {
        b: false
      }
    }
  }
  node {
    name: "gradients/MatMul_grad/tuple/group_deps"
    op: "NoOp"
    input: "^gradients/MatMul_grad/MatMul"
    input: "^gradients/MatMul_grad/MatMul_1"
  }
  node {
    name: "gradients/MatMul_grad/tuple/control_dependency"
    op: "Identity"
    input: "gradients/MatMul_grad/MatMul"
    input: "^gradients/MatMul_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/MatMul_grad/MatMul"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 784
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/MatMul_grad/tuple/control_dependency_1"
    op: "Identity"
    input: "gradients/MatMul_grad/MatMul_1"
    input: "^gradients/MatMul_grad/tuple/group_deps"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/MatMul_grad/MatMul_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "gradients/AddN_3"
    op: "AddN"
    input: "gradients/l2_regularizer/L2Loss_grad/mul"
    input: "gradients/MatMul_grad/tuple/control_dependency_1"
    attr {
      key: "N"
      value {
        i: 2
      }
    }
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@gradients/l2_regularizer/L2Loss_grad/mul"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable/Adadelta/Initializer/zeros/shape_as_tensor"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 2
            }
          }
          tensor_content: "\020\003\000\000\364\001\000\000"
        }
      }
    }
  }
  node {
    name: "Variable/Adadelta/Initializer/zeros/Const"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "Variable/Adadelta/Initializer/zeros"
    op: "Fill"
    input: "Variable/Adadelta/Initializer/zeros/shape_as_tensor"
    input: "Variable/Adadelta/Initializer/zeros/Const"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "index_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "Variable/Adadelta"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable/Adadelta/Assign"
    op: "Assign"
    input: "Variable/Adadelta"
    input: "Variable/Adadelta/Initializer/zeros"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable/Adadelta/read"
    op: "Identity"
    input: "Variable/Adadelta"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable/Adadelta_1/Initializer/zeros/shape_as_tensor"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 2
            }
          }
          tensor_content: "\020\003\000\000\364\001\000\000"
        }
      }
    }
  }
  node {
    name: "Variable/Adadelta_1/Initializer/zeros/Const"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "Variable/Adadelta_1/Initializer/zeros"
    op: "Fill"
    input: "Variable/Adadelta_1/Initializer/zeros/shape_as_tensor"
    input: "Variable/Adadelta_1/Initializer/zeros/Const"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "index_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "Variable/Adadelta_1"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable/Adadelta_1/Assign"
    op: "Assign"
    input: "Variable/Adadelta_1"
    input: "Variable/Adadelta_1/Initializer/zeros"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable/Adadelta_1/read"
    op: "Identity"
    input: "Variable/Adadelta_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/Adadelta/Initializer/zeros"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 500
            }
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "Variable_1/Adadelta"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_1/Adadelta/Assign"
    op: "Assign"
    input: "Variable_1/Adadelta"
    input: "Variable_1/Adadelta/Initializer/zeros"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_1/Adadelta/read"
    op: "Identity"
    input: "Variable_1/Adadelta"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_1/Adadelta_1/Initializer/zeros"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 500
            }
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "Variable_1/Adadelta_1"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_1/Adadelta_1/Assign"
    op: "Assign"
    input: "Variable_1/Adadelta_1"
    input: "Variable_1/Adadelta_1/Initializer/zeros"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_1/Adadelta_1/read"
    op: "Identity"
    input: "Variable_1/Adadelta_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/Adadelta/Initializer/zeros/shape_as_tensor"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 2
            }
          }
          tensor_content: "\364\001\000\000\n\000\000\000"
        }
      }
    }
  }
  node {
    name: "Variable_2/Adadelta/Initializer/zeros/Const"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "Variable_2/Adadelta/Initializer/zeros"
    op: "Fill"
    input: "Variable_2/Adadelta/Initializer/zeros/shape_as_tensor"
    input: "Variable_2/Adadelta/Initializer/zeros/Const"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "index_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "Variable_2/Adadelta"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 10
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_2/Adadelta/Assign"
    op: "Assign"
    input: "Variable_2/Adadelta"
    input: "Variable_2/Adadelta/Initializer/zeros"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_2/Adadelta/read"
    op: "Identity"
    input: "Variable_2/Adadelta"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_2/Adadelta_1/Initializer/zeros/shape_as_tensor"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 2
            }
          }
          tensor_content: "\364\001\000\000\n\000\000\000"
        }
      }
    }
  }
  node {
    name: "Variable_2/Adadelta_1/Initializer/zeros/Const"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "Variable_2/Adadelta_1/Initializer/zeros"
    op: "Fill"
    input: "Variable_2/Adadelta_1/Initializer/zeros/shape_as_tensor"
    input: "Variable_2/Adadelta_1/Initializer/zeros/Const"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "index_type"
      value {
        type: DT_INT32
      }
    }
  }
  node {
    name: "Variable_2/Adadelta_1"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 10
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_2/Adadelta_1/Assign"
    op: "Assign"
    input: "Variable_2/Adadelta_1"
    input: "Variable_2/Adadelta_1/Initializer/zeros"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_2/Adadelta_1/read"
    op: "Identity"
    input: "Variable_2/Adadelta_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/Adadelta/Initializer/zeros"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 10
            }
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "Variable_3/Adadelta"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_3/Adadelta/Assign"
    op: "Assign"
    input: "Variable_3/Adadelta"
    input: "Variable_3/Adadelta/Initializer/zeros"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_3/Adadelta/read"
    op: "Identity"
    input: "Variable_3/Adadelta"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Variable_3/Adadelta_1/Initializer/zeros"
    op: "Const"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 10
            }
          }
          float_val: 0.0
        }
      }
    }
  }
  node {
    name: "Variable_3/Adadelta_1"
    op: "VariableV2"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "container"
      value {
        s: ""
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "shape"
      value {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
    attr {
      key: "shared_name"
      value {
        s: ""
      }
    }
  }
  node {
    name: "Variable_3/Adadelta_1/Assign"
    op: "Assign"
    input: "Variable_3/Adadelta_1"
    input: "Variable_3/Adadelta_1/Initializer/zeros"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "Variable_3/Adadelta_1/read"
    op: "Identity"
    input: "Variable_3/Adadelta_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
  }
  node {
    name: "Adadelta/rho"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 0.949999988079071
        }
      }
    }
  }
  node {
    name: "Adadelta/epsilon"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_FLOAT
          tensor_shape {
          }
          float_val: 9.99999993922529e-09
        }
      }
    }
  }
  node {
    name: "Adadelta/update_Variable/ApplyAdadelta"
    op: "ApplyAdadelta"
    input: "Variable"
    input: "Variable/Adadelta"
    input: "Variable/Adadelta_1"
    input: "ExponentialDecay"
    input: "Adadelta/rho"
    input: "Adadelta/epsilon"
    input: "gradients/AddN_3"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: false
      }
    }
  }
  node {
    name: "Adadelta/update_Variable_1/ApplyAdadelta"
    op: "ApplyAdadelta"
    input: "Variable_1"
    input: "Variable_1/Adadelta"
    input: "Variable_1/Adadelta_1"
    input: "ExponentialDecay"
    input: "Adadelta/rho"
    input: "Adadelta/epsilon"
    input: "gradients/add_grad/tuple/control_dependency_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: false
      }
    }
  }
  node {
    name: "Adadelta/update_Variable_2/ApplyAdadelta"
    op: "ApplyAdadelta"
    input: "Variable_2"
    input: "Variable_2/Adadelta"
    input: "Variable_2/Adadelta_1"
    input: "ExponentialDecay"
    input: "Adadelta/rho"
    input: "Adadelta/epsilon"
    input: "gradients/AddN_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: false
      }
    }
  }
  node {
    name: "Adadelta/update_Variable_3/ApplyAdadelta"
    op: "ApplyAdadelta"
    input: "Variable_3"
    input: "Variable_3/Adadelta"
    input: "Variable_3/Adadelta_1"
    input: "ExponentialDecay"
    input: "Adadelta/rho"
    input: "Adadelta/epsilon"
    input: "gradients/add_1_grad/tuple/control_dependency_1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: false
      }
    }
  }
  node {
    name: "Adadelta/update"
    op: "NoOp"
    input: "^Adadelta/update_Variable/ApplyAdadelta"
    input: "^Adadelta/update_Variable_1/ApplyAdadelta"
    input: "^Adadelta/update_Variable_2/ApplyAdadelta"
    input: "^Adadelta/update_Variable_3/ApplyAdadelta"
  }
  node {
    name: "Adadelta/value"
    op: "Const"
    input: "^Adadelta/update"
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_4"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
          }
          int_val: 1
        }
      }
    }
  }
  node {
    name: "Adadelta"
    op: "AssignAdd"
    input: "Variable_4"
    input: "Adadelta/value"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_4"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: false
      }
    }
  }
  node {
    name: "group_deps"
    op: "NoOp"
    input: "^Adadelta"
    input: "^ExponentialMovingAverage"
  }
  node {
    name: "ArgMax_1/dimension"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
          }
          int_val: 1
        }
      }
    }
  }
  node {
    name: "ArgMax_1"
    op: "ArgMax"
    input: "LeakyRelu_3"
    input: "ArgMax_1/dimension"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    attr {
      key: "output_type"
      value {
        type: DT_INT64
      }
    }
  }
  node {
    name: "ArgMax_2/dimension"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
          }
          int_val: 1
        }
      }
    }
  }
  node {
    name: "ArgMax_2"
    op: "ArgMax"
    input: "y-input"
    input: "ArgMax_2/dimension"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    attr {
      key: "output_type"
      value {
        type: DT_INT64
      }
    }
  }
  node {
    name: "Equal"
    op: "Equal"
    input: "ArgMax_1"
    input: "ArgMax_2"
    attr {
      key: "T"
      value {
        type: DT_INT64
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
  }
  node {
    name: "Cast"
    op: "Cast"
    input: "Equal"
    attr {
      key: "DstT"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "SrcT"
      value {
        type: DT_BOOL
      }
    }
    attr {
      key: "Truncate"
      value {
        b: false
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
  }
  node {
    name: "Const_3"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 1
            }
          }
          int_val: 0
        }
      }
    }
  }
  node {
    name: "Mean_1"
    op: "Mean"
    input: "Cast"
    input: "Const_3"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "Tidx"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "keep_dims"
      value {
        b: false
      }
    }
  }
  node {
    name: "init"
    op: "NoOp"
    input: "^Variable/Adadelta/Assign"
    input: "^Variable/Adadelta_1/Assign"
    input: "^Variable/Assign"
    input: "^Variable/ExponentialMovingAverage/Assign"
    input: "^Variable_1/Adadelta/Assign"
    input: "^Variable_1/Adadelta_1/Assign"
    input: "^Variable_1/Assign"
    input: "^Variable_1/ExponentialMovingAverage/Assign"
    input: "^Variable_2/Adadelta/Assign"
    input: "^Variable_2/Adadelta_1/Assign"
    input: "^Variable_2/Assign"
    input: "^Variable_2/ExponentialMovingAverage/Assign"
    input: "^Variable_3/Adadelta/Assign"
    input: "^Variable_3/Adadelta_1/Assign"
    input: "^Variable_3/Assign"
    input: "^Variable_3/ExponentialMovingAverage/Assign"
    input: "^Variable_4/Assign"
  }
  node {
    name: "save/Const"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_STRING
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_STRING
          tensor_shape {
          }
          string_val: "model"
        }
      }
    }
  }
  node {
    name: "save/SaveV2/tensor_names"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 17
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_STRING
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_STRING
          tensor_shape {
            dim {
              size: 17
            }
          }
          string_val: "Variable"
          string_val: "Variable/Adadelta"
          string_val: "Variable/Adadelta_1"
          string_val: "Variable/ExponentialMovingAverage"
          string_val: "Variable_1"
          string_val: "Variable_1/Adadelta"
          string_val: "Variable_1/Adadelta_1"
          string_val: "Variable_1/ExponentialMovingAverage"
          string_val: "Variable_2"
          string_val: "Variable_2/Adadelta"
          string_val: "Variable_2/Adadelta_1"
          string_val: "Variable_2/ExponentialMovingAverage"
          string_val: "Variable_3"
          string_val: "Variable_3/Adadelta"
          string_val: "Variable_3/Adadelta_1"
          string_val: "Variable_3/ExponentialMovingAverage"
          string_val: "Variable_4"
        }
      }
    }
  }
  node {
    name: "save/SaveV2/shape_and_slices"
    op: "Const"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 17
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_STRING
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_STRING
          tensor_shape {
            dim {
              size: 17
            }
          }
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
        }
      }
    }
  }
  node {
    name: "save/SaveV2"
    op: "SaveV2"
    input: "save/Const"
    input: "save/SaveV2/tensor_names"
    input: "save/SaveV2/shape_and_slices"
    input: "Variable"
    input: "Variable/Adadelta"
    input: "Variable/Adadelta_1"
    input: "Variable/ExponentialMovingAverage"
    input: "Variable_1"
    input: "Variable_1/Adadelta"
    input: "Variable_1/Adadelta_1"
    input: "Variable_1/ExponentialMovingAverage"
    input: "Variable_2"
    input: "Variable_2/Adadelta"
    input: "Variable_2/Adadelta_1"
    input: "Variable_2/ExponentialMovingAverage"
    input: "Variable_3"
    input: "Variable_3/Adadelta"
    input: "Variable_3/Adadelta_1"
    input: "Variable_3/ExponentialMovingAverage"
    input: "Variable_4"
    attr {
      key: "dtypes"
      value {
        list {
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_INT32
        }
      }
    }
  }
  node {
    name: "save/control_dependency"
    op: "Identity"
    input: "save/Const"
    input: "^save/SaveV2"
    attr {
      key: "T"
      value {
        type: DT_STRING
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@save/Const"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  node {
    name: "save/RestoreV2/tensor_names"
    op: "Const"
    device: "/device:CPU:0"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 17
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_STRING
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_STRING
          tensor_shape {
            dim {
              size: 17
            }
          }
          string_val: "Variable"
          string_val: "Variable/Adadelta"
          string_val: "Variable/Adadelta_1"
          string_val: "Variable/ExponentialMovingAverage"
          string_val: "Variable_1"
          string_val: "Variable_1/Adadelta"
          string_val: "Variable_1/Adadelta_1"
          string_val: "Variable_1/ExponentialMovingAverage"
          string_val: "Variable_2"
          string_val: "Variable_2/Adadelta"
          string_val: "Variable_2/Adadelta_1"
          string_val: "Variable_2/ExponentialMovingAverage"
          string_val: "Variable_3"
          string_val: "Variable_3/Adadelta"
          string_val: "Variable_3/Adadelta_1"
          string_val: "Variable_3/ExponentialMovingAverage"
          string_val: "Variable_4"
        }
      }
    }
  }
  node {
    name: "save/RestoreV2/shape_and_slices"
    op: "Const"
    device: "/device:CPU:0"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 17
            }
          }
        }
      }
    }
    attr {
      key: "dtype"
      value {
        type: DT_STRING
      }
    }
    attr {
      key: "value"
      value {
        tensor {
          dtype: DT_STRING
          tensor_shape {
            dim {
              size: 17
            }
          }
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
          string_val: ""
        }
      }
    }
  }
  node {
    name: "save/RestoreV2"
    op: "RestoreV2"
    input: "save/Const"
    input: "save/RestoreV2/tensor_names"
    input: "save/RestoreV2/shape_and_slices"
    device: "/device:CPU:0"
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
        }
      }
    }
    attr {
      key: "dtypes"
      value {
        list {
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_FLOAT
          type: DT_INT32
        }
      }
    }
  }
  node {
    name: "save/Assign"
    op: "Assign"
    input: "Variable"
    input: "save/RestoreV2"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_1"
    op: "Assign"
    input: "Variable/Adadelta"
    input: "save/RestoreV2:1"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_2"
    op: "Assign"
    input: "Variable/Adadelta_1"
    input: "save/RestoreV2:2"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_3"
    op: "Assign"
    input: "Variable/ExponentialMovingAverage"
    input: "save/RestoreV2:3"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_4"
    op: "Assign"
    input: "Variable_1"
    input: "save/RestoreV2:4"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_5"
    op: "Assign"
    input: "Variable_1/Adadelta"
    input: "save/RestoreV2:5"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_6"
    op: "Assign"
    input: "Variable_1/Adadelta_1"
    input: "save/RestoreV2:6"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_7"
    op: "Assign"
    input: "Variable_1/ExponentialMovingAverage"
    input: "save/RestoreV2:7"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_1"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_8"
    op: "Assign"
    input: "Variable_2"
    input: "save/RestoreV2:8"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_9"
    op: "Assign"
    input: "Variable_2/Adadelta"
    input: "save/RestoreV2:9"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_10"
    op: "Assign"
    input: "Variable_2/Adadelta_1"
    input: "save/RestoreV2:10"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_11"
    op: "Assign"
    input: "Variable_2/ExponentialMovingAverage"
    input: "save/RestoreV2:11"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_2"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 500
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_12"
    op: "Assign"
    input: "Variable_3"
    input: "save/RestoreV2:12"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_13"
    op: "Assign"
    input: "Variable_3/Adadelta"
    input: "save/RestoreV2:13"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_14"
    op: "Assign"
    input: "Variable_3/Adadelta_1"
    input: "save/RestoreV2:14"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_15"
    op: "Assign"
    input: "Variable_3/ExponentialMovingAverage"
    input: "save/RestoreV2:15"
    attr {
      key: "T"
      value {
        type: DT_FLOAT
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_3"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/Assign_16"
    op: "Assign"
    input: "Variable_4"
    input: "save/RestoreV2:16"
    attr {
      key: "T"
      value {
        type: DT_INT32
      }
    }
    attr {
      key: "_class"
      value {
        list {
          s: "loc:@Variable_4"
        }
      }
    }
    attr {
      key: "_output_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "use_locking"
      value {
        b: true
      }
    }
    attr {
      key: "validate_shape"
      value {
        b: true
      }
    }
  }
  node {
    name: "save/restore_all"
    op: "NoOp"
    input: "^save/Assign"
    input: "^save/Assign_1"
    input: "^save/Assign_10"
    input: "^save/Assign_11"
    input: "^save/Assign_12"
    input: "^save/Assign_13"
    input: "^save/Assign_14"
    input: "^save/Assign_15"
    input: "^save/Assign_16"
    input: "^save/Assign_2"
    input: "^save/Assign_3"
    input: "^save/Assign_4"
    input: "^save/Assign_5"
    input: "^save/Assign_6"
    input: "^save/Assign_7"
    input: "^save/Assign_8"
    input: "^save/Assign_9"
  }
  versions {
    producer: 27
  }
}
saver_def {
  filename_tensor_name: "save/Const:0"
  save_tensor_name: "save/control_dependency:0"
  restore_op_name: "save/restore_all"
  max_to_keep: 5
  keep_checkpoint_every_n_hours: 10000.0
  version: V2
}
collection_def {
  key: "cond_context"
  value {
    bytes_list {
      value: "\n\016cond/cond_text\022\016cond/pred_id:0\032\017cond/switch_t:0 \001*\222\001\n\nVariable:0\n\016cond/pred_id:0\n\022cond/read/Switch:1\n\013cond/read:0\n\017cond/switch_t:0\022 \n\016cond/pred_id:0\022\016cond/pred_id:0\022 \n\nVariable:0\022\022cond/read/Switch:1"
      value: "\n\020cond/cond_text_1\022\016cond/pred_id:0\032\017cond/switch_f:0*\240\001\n\017cond/Switch_1:0\n\017cond/Switch_1:1\n\016cond/pred_id:0\n\017cond/switch_f:0\n\022truncated_normal:0\022 \n\016cond/pred_id:0\022\016cond/pred_id:0\022%\n\022truncated_normal:0\022\017cond/Switch_1:0"
      value: "\n0Variable/ExponentialMovingAverage/cond/cond_text\0220Variable/ExponentialMovingAverage/cond/pred_id:0\0321Variable/ExponentialMovingAverage/cond/switch_t:0 \001*\200\003\n0Variable/ExponentialMovingAverage/cond/pred_id:0\n4Variable/ExponentialMovingAverage/cond/read/Switch:1\n-Variable/ExponentialMovingAverage/cond/read:0\n1Variable/ExponentialMovingAverage/cond/switch_t:0\n\nVariable:0\022B\n\nVariable:0\0224Variable/ExponentialMovingAverage/cond/read/Switch:1\022d\n0Variable/ExponentialMovingAverage/cond/pred_id:0\0220Variable/ExponentialMovingAverage/cond/pred_id:0"
      value: "\n2Variable/ExponentialMovingAverage/cond/cond_text_1\0220Variable/ExponentialMovingAverage/cond/pred_id:0\0321Variable/ExponentialMovingAverage/cond/switch_f:0*\216\003\n1Variable/ExponentialMovingAverage/cond/Switch_1:0\n1Variable/ExponentialMovingAverage/cond/Switch_1:1\n0Variable/ExponentialMovingAverage/cond/pred_id:0\n1Variable/ExponentialMovingAverage/cond/switch_f:0\n\022truncated_normal:0\022G\n\022truncated_normal:0\0221Variable/ExponentialMovingAverage/cond/Switch_1:0\022d\n0Variable/ExponentialMovingAverage/cond/pred_id:0\0220Variable/ExponentialMovingAverage/cond/pred_id:0"
      value: "\n\020cond_1/cond_text\022\020cond_1/pred_id:0\032\021cond_1/switch_t:0 \001*\244\001\n\014Variable_1:0\n\020cond_1/pred_id:0\n\024cond_1/read/Switch:1\n\rcond_1/read:0\n\021cond_1/switch_t:0\022$\n\014Variable_1:0\022\024cond_1/read/Switch:1\022$\n\020cond_1/pred_id:0\022\020cond_1/pred_id:0"
      value: "\n\022cond_1/cond_text_1\022\020cond_1/pred_id:0\032\021cond_1/switch_f:0*\230\001\n\007Const:0\n\021cond_1/Switch_1:0\n\021cond_1/Switch_1:1\n\020cond_1/pred_id:0\n\021cond_1/switch_f:0\022\034\n\007Const:0\022\021cond_1/Switch_1:0\022$\n\020cond_1/pred_id:0\022\020cond_1/pred_id:0"
      value: "\n2Variable_1/ExponentialMovingAverage/cond/cond_text\0222Variable_1/ExponentialMovingAverage/cond/pred_id:0\0323Variable_1/ExponentialMovingAverage/cond/switch_t:0 \001*\222\003\n2Variable_1/ExponentialMovingAverage/cond/pred_id:0\n6Variable_1/ExponentialMovingAverage/cond/read/Switch:1\n/Variable_1/ExponentialMovingAverage/cond/read:0\n3Variable_1/ExponentialMovingAverage/cond/switch_t:0\n\014Variable_1:0\022F\n\014Variable_1:0\0226Variable_1/ExponentialMovingAverage/cond/read/Switch:1\022h\n2Variable_1/ExponentialMovingAverage/cond/pred_id:0\0222Variable_1/ExponentialMovingAverage/cond/pred_id:0"
      value: "\n4Variable_1/ExponentialMovingAverage/cond/cond_text_1\0222Variable_1/ExponentialMovingAverage/cond/pred_id:0\0323Variable_1/ExponentialMovingAverage/cond/switch_f:0*\206\003\n\007Const:0\n3Variable_1/ExponentialMovingAverage/cond/Switch_1:0\n3Variable_1/ExponentialMovingAverage/cond/Switch_1:1\n2Variable_1/ExponentialMovingAverage/cond/pred_id:0\n3Variable_1/ExponentialMovingAverage/cond/switch_f:0\022>\n\007Const:0\0223Variable_1/ExponentialMovingAverage/cond/Switch_1:0\022h\n2Variable_1/ExponentialMovingAverage/cond/pred_id:0\0222Variable_1/ExponentialMovingAverage/cond/pred_id:0"
      value: "\n\020cond_2/cond_text\022\020cond_2/pred_id:0\032\021cond_2/switch_t:0 \001*\244\001\n\014Variable_2:0\n\020cond_2/pred_id:0\n\024cond_2/read/Switch:1\n\rcond_2/read:0\n\021cond_2/switch_t:0\022$\n\020cond_2/pred_id:0\022\020cond_2/pred_id:0\022$\n\014Variable_2:0\022\024cond_2/read/Switch:1"
      value: "\n\022cond_2/cond_text_1\022\020cond_2/pred_id:0\032\021cond_2/switch_f:0*\262\001\n\021cond_2/Switch_1:0\n\021cond_2/Switch_1:1\n\020cond_2/pred_id:0\n\021cond_2/switch_f:0\n\024truncated_normal_1:0\022$\n\020cond_2/pred_id:0\022\020cond_2/pred_id:0\022)\n\024truncated_normal_1:0\022\021cond_2/Switch_1:0"
      value: "\n2Variable_2/ExponentialMovingAverage/cond/cond_text\0222Variable_2/ExponentialMovingAverage/cond/pred_id:0\0323Variable_2/ExponentialMovingAverage/cond/switch_t:0 \001*\222\003\n2Variable_2/ExponentialMovingAverage/cond/pred_id:0\n6Variable_2/ExponentialMovingAverage/cond/read/Switch:1\n/Variable_2/ExponentialMovingAverage/cond/read:0\n3Variable_2/ExponentialMovingAverage/cond/switch_t:0\n\014Variable_2:0\022h\n2Variable_2/ExponentialMovingAverage/cond/pred_id:0\0222Variable_2/ExponentialMovingAverage/cond/pred_id:0\022F\n\014Variable_2:0\0226Variable_2/ExponentialMovingAverage/cond/read/Switch:1"
      value: "\n4Variable_2/ExponentialMovingAverage/cond/cond_text_1\0222Variable_2/ExponentialMovingAverage/cond/pred_id:0\0323Variable_2/ExponentialMovingAverage/cond/switch_f:0*\240\003\n3Variable_2/ExponentialMovingAverage/cond/Switch_1:0\n3Variable_2/ExponentialMovingAverage/cond/Switch_1:1\n2Variable_2/ExponentialMovingAverage/cond/pred_id:0\n3Variable_2/ExponentialMovingAverage/cond/switch_f:0\n\024truncated_normal_1:0\022K\n\024truncated_normal_1:0\0223Variable_2/ExponentialMovingAverage/cond/Switch_1:0\022h\n2Variable_2/ExponentialMovingAverage/cond/pred_id:0\0222Variable_2/ExponentialMovingAverage/cond/pred_id:0"
      value: "\n\020cond_3/cond_text\022\020cond_3/pred_id:0\032\021cond_3/switch_t:0 \001*\244\001\n\014Variable_3:0\n\020cond_3/pred_id:0\n\024cond_3/read/Switch:1\n\rcond_3/read:0\n\021cond_3/switch_t:0\022$\n\020cond_3/pred_id:0\022\020cond_3/pred_id:0\022$\n\014Variable_3:0\022\024cond_3/read/Switch:1"
      value: "\n\022cond_3/cond_text_1\022\020cond_3/pred_id:0\032\021cond_3/switch_f:0*\234\001\n\tConst_1:0\n\021cond_3/Switch_1:0\n\021cond_3/Switch_1:1\n\020cond_3/pred_id:0\n\021cond_3/switch_f:0\022\036\n\tConst_1:0\022\021cond_3/Switch_1:0\022$\n\020cond_3/pred_id:0\022\020cond_3/pred_id:0"
      value: "\n2Variable_3/ExponentialMovingAverage/cond/cond_text\0222Variable_3/ExponentialMovingAverage/cond/pred_id:0\0323Variable_3/ExponentialMovingAverage/cond/switch_t:0 \001*\222\003\n2Variable_3/ExponentialMovingAverage/cond/pred_id:0\n6Variable_3/ExponentialMovingAverage/cond/read/Switch:1\n/Variable_3/ExponentialMovingAverage/cond/read:0\n3Variable_3/ExponentialMovingAverage/cond/switch_t:0\n\014Variable_3:0\022h\n2Variable_3/ExponentialMovingAverage/cond/pred_id:0\0222Variable_3/ExponentialMovingAverage/cond/pred_id:0\022F\n\014Variable_3:0\0226Variable_3/ExponentialMovingAverage/cond/read/Switch:1"
      value: "\n4Variable_3/ExponentialMovingAverage/cond/cond_text_1\0222Variable_3/ExponentialMovingAverage/cond/pred_id:0\0323Variable_3/ExponentialMovingAverage/cond/switch_f:0*\212\003\n\tConst_1:0\n3Variable_3/ExponentialMovingAverage/cond/Switch_1:0\n3Variable_3/ExponentialMovingAverage/cond/Switch_1:1\n2Variable_3/ExponentialMovingAverage/cond/pred_id:0\n3Variable_3/ExponentialMovingAverage/cond/switch_f:0\022@\n\tConst_1:0\0223Variable_3/ExponentialMovingAverage/cond/Switch_1:0\022h\n2Variable_3/ExponentialMovingAverage/cond/pred_id:0\0222Variable_3/ExponentialMovingAverage/cond/pred_id:0"
    }
  }
}
collection_def {
  key: "moving_average_variables"
  value {
    bytes_list {
      value: "\n\nVariable:0\022\017Variable/Assign\032\017Variable/read:02\022truncated_normal:08\001"
      value: "\n\014Variable_1:0\022\021Variable_1/Assign\032\021Variable_1/read:02\007Const:08\001"
      value: "\n\014Variable_2:0\022\021Variable_2/Assign\032\021Variable_2/read:02\024truncated_normal_1:08\001"
      value: "\n\014Variable_3:0\022\021Variable_3/Assign\032\021Variable_3/read:02\tConst_1:08\001"
    }
  }
}
collection_def {
  key: "train_op"
  value {
    node_list {
      value: "Adadelta"
    }
  }
}
collection_def {
  key: "trainable_variables"
  value {
    bytes_list {
      value: "\n\nVariable:0\022\017Variable/Assign\032\017Variable/read:02\022truncated_normal:08\001"
      value: "\n\014Variable_1:0\022\021Variable_1/Assign\032\021Variable_1/read:02\007Const:08\001"
      value: "\n\014Variable_2:0\022\021Variable_2/Assign\032\021Variable_2/read:02\024truncated_normal_1:08\001"
      value: "\n\014Variable_3:0\022\021Variable_3/Assign\032\021Variable_3/read:02\tConst_1:08\001"
    }
  }
}
collection_def {
  key: "variables"
  value {
    bytes_list {
      value: "\n\nVariable:0\022\017Variable/Assign\032\017Variable/read:02\022truncated_normal:08\001"
      value: "\n\014Variable_1:0\022\021Variable_1/Assign\032\021Variable_1/read:02\007Const:08\001"
      value: "\n\014Variable_2:0\022\021Variable_2/Assign\032\021Variable_2/read:02\024truncated_normal_1:08\001"
      value: "\n\014Variable_3:0\022\021Variable_3/Assign\032\021Variable_3/read:02\tConst_1:08\001"
      value: "\n\014Variable_4:0\022\021Variable_4/Assign\032\021Variable_4/read:02\032Variable_4/initial_value:0"
      value: "\n#Variable/ExponentialMovingAverage:0\022(Variable/ExponentialMovingAverage/Assign\032(Variable/ExponentialMovingAverage/read:02\014cond/Merge:0"
      value: "\n%Variable_1/ExponentialMovingAverage:0\022*Variable_1/ExponentialMovingAverage/Assign\032*Variable_1/ExponentialMovingAverage/read:02\016cond_1/Merge:0"
      value: "\n%Variable_2/ExponentialMovingAverage:0\022*Variable_2/ExponentialMovingAverage/Assign\032*Variable_2/ExponentialMovingAverage/read:02\016cond_2/Merge:0"
      value: "\n%Variable_3/ExponentialMovingAverage:0\022*Variable_3/ExponentialMovingAverage/Assign\032*Variable_3/ExponentialMovingAverage/read:02\016cond_3/Merge:0"
      value: "\n\023Variable/Adadelta:0\022\030Variable/Adadelta/Assign\032\030Variable/Adadelta/read:02%Variable/Adadelta/Initializer/zeros:0"
      value: "\n\025Variable/Adadelta_1:0\022\032Variable/Adadelta_1/Assign\032\032Variable/Adadelta_1/read:02\'Variable/Adadelta_1/Initializer/zeros:0"
      value: "\n\025Variable_1/Adadelta:0\022\032Variable_1/Adadelta/Assign\032\032Variable_1/Adadelta/read:02\'Variable_1/Adadelta/Initializer/zeros:0"
      value: "\n\027Variable_1/Adadelta_1:0\022\034Variable_1/Adadelta_1/Assign\032\034Variable_1/Adadelta_1/read:02)Variable_1/Adadelta_1/Initializer/zeros:0"
      value: "\n\025Variable_2/Adadelta:0\022\032Variable_2/Adadelta/Assign\032\032Variable_2/Adadelta/read:02\'Variable_2/Adadelta/Initializer/zeros:0"
      value: "\n\027Variable_2/Adadelta_1:0\022\034Variable_2/Adadelta_1/Assign\032\034Variable_2/Adadelta_1/read:02)Variable_2/Adadelta_1/Initializer/zeros:0"
      value: "\n\025Variable_3/Adadelta:0\022\032Variable_3/Adadelta/Assign\032\032Variable_3/Adadelta/read:02\'Variable_3/Adadelta/Initializer/zeros:0"
      value: "\n\027Variable_3/Adadelta_1:0\022\034Variable_3/Adadelta_1/Assign\032\034Variable_3/Adadelta_1/read:02)Variable_3/Adadelta_1/Initializer/zeros:0"
    }
  }
}
